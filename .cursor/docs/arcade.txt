# Arcade

> Arcade is an AI Tool-calling Platform. For the first time, AI can securely act on behalf of users through Arcade's authenticated integrations, or "tools" in AI lingo. Connect AI to email, files, calendars, and APIs to build assistants that don't just chat - they get work done. Start building in minutes with our pre-built connectors or custom SDK.

Arcade enables your AI agent to securely take real-world actions through user-specific permissions, pre-built MCP Servers for Gmail, Slack, GitHub, and more. You can also build your own agentic tools and MCP servers with our authoring and testing suite. Arcade is your tool engine, registry, and runtime.

## Getting Started

- [page](https://docs.arcade.dev/en/home.md): The Arcade Docs page serves as a comprehensive resource for users, providing essential information and guidance on all aspects of Arcade. It aims to help users navigate and utilize the features of Arcade effectively.

## Agentic Development

- [Agentic Development](https://docs.arcade.dev/en/home/agentic-development.md): This documentation page provides guidance on enhancing development efficiency by integrating AI tools with Arcade.dev's resources in IDEs. It explains how to use the LLMs.txt file format and Context7 server to give AI IDEs access to up-to-date documentation,

## Api Keys

- [Getting Your API Key](https://docs.arcade.dev/en/home/api-keys.md): This documentation page guides users on how to obtain and manage their Arcade API key, detailing the steps for both the dashboard and CLI methods. It emphasizes the importance of securely storing the API key, as it grants access to administrative capabilities. Additionally, it provides

## API Reference

- [Arcade API Reference](https://docs.arcade.dev/en/references/api.md): The Arcade API Reference documentation provides users with essential information about the Arcade API, including its base URL and usage guidelines. It enables users to explore the API's functionalities through an interactive Swagger UI, facilitating easier integration and development. Additionally, it emphasizes the importance
- [Arcade MCP (MCP Server SDK) - Python Overview](https://docs.arcade.dev/en/references/mcp/python/overview.md): This documentation page provides an overview of the Arcade MCP (MCP Server SDK) for Python, detailing its clean API designed for programmatically building MCP servers. Users will learn how to configure server settings, manage tools, and utilize the MCPApp class to
- [Claude Desktop](https://docs.arcade.dev/en/references/mcp/python/clients/claude-desktop.md): The Claude Desktop documentation provides a comprehensive guide for setting up and configuring Arcade MCP servers, including prerequisites, quick setup instructions using the Arcade CLI, and manual configuration options. Users will learn how to manage multiple servers, troubleshoot common issues, and implement best practices
- [Cursor IDE](https://docs.arcade.dev/en/references/mcp/python/clients/cursor.md): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with the AI-powered Cursor IDE, enabling enhanced development capabilities. It covers prerequisites, configuration methods, development workflows, and troubleshooting tips to help users effectively set up and utilize MCP servers within Cursor.
- [Errors](https://docs.arcade.dev/en/references/mcp/python/errors.md): This documentation page provides an overview of domain-specific error types used in the MCP server and its components, detailing the MCP exception hierarchy for improved error handling and debugging. Users can learn about various exceptions, such as `MCPError`, `ServerError`,
- [MCP Inspector](https://docs.arcade.dev/en/references/mcp/python/clients/mcp-inspector.md): The MCP Inspector documentation provides users with a comprehensive guide to installing and utilizing a web-based debugging and testing tool for MCP servers. It covers features such as tool exploration, interactive testing, protocol monitoring, and resource browsing, while also offering advanced usage tips,
- [Middleware](https://docs.arcade.dev/en/references/mcp/python/middleware.md): This documentation page provides an overview of the Middleware component in the Arcade MCP Server SDK for Python, detailing how to intercept and modify MCP requests and responses through a series of handler methods. It outlines the base classes, including `Middleware` and `MiddlewareContext
- [Server](https://docs.arcade.dev/en/references/mcp/python/server.md): This documentation page provides a reference for the `MCPServer` class in the Arcade MCP Python library, detailing its purpose as a low-level server for hosting Arcade tools over the MCP protocol. Users will learn about the server's features, including middleware support
- [Settings](https://docs.arcade.dev/en/references/mcp/python/settings.md): This documentation page provides an overview of global configuration and environment-driven settings for the Arcade MCP Server, detailing how to manage and utilize various settings containers such as MCPSettings and its sub-settings. Users can learn to create settings from environment variables, convert settings to
- [Sharing your MCP server](https://docs.arcade.dev/en/references/mcp/python/sharing.md): This documentation page guides users on how to share their MCP server with others by creating a secure tunnel and registering it with Arcade. It provides step-by-step instructions for setting up the server, establishing a tunnel using various options (ngrok, Cloudflare Tunnel
- [Transport Modes](https://docs.arcade.dev/en/references/mcp/python/transports.md): This documentation page provides an overview of the different transport modes available for MCP servers, specifically focusing on stdio and HTTP transports. It details the characteristics, usage, and configuration options for each transport mode, helping users choose the appropriate one based on their application
- [Types](https://docs.arcade.dev/en/references/mcp/python/types.md): This documentation page provides an overview of core Pydantic models and enums used in the MCP protocol, specifically detailing the `CallToolResult` and `SessionMessage` types. It helps users understand how to construct JSON-RPC requests and responses, as
- [Visual Studio Code](https://docs.arcade.dev/en/references/mcp/python/clients/visual-studio-code.md): This documentation page provides a comprehensive guide for integrating Arcade MCP servers with Visual Studio Code (VSCode) through various methods, including terminal integration, task runners, and launch configurations. It outlines prerequisites, development workflows, debugging tips, and best practices to enhance

## Arcade Cli

- [The Arcade CLI](https://docs.arcade.dev/en/home/arcade-cli.md): This documentation page provides instructions on how to install and utilize the Arcade CLI, a command-line tool designed for managing Arcade deployments and toolkits. Users will learn how to set up the CLI within their Python virtual environment and access various commands for tasks such as

## Auth

- [Authorized Tool Calling](https://docs.arcade.dev/en/home/auth/auth-tool-calling.md): The "Authorized Tool Calling" documentation page provides a comprehensive guide for developers on how to implement an authorization system using Arcade, enabling AI agents to securely access external services on behalf of users. It covers the steps for initializing the client, authorizing tools,
- [Checking Tool Authorization Status](https://docs.arcade.dev/en/home/auth/tool-auth-status.md): This documentation page provides a comprehensive guide on how to check the authorization status of tools before execution, helping users understand the necessary permissions and tool availability. It includes instructions for initializing the client, checking the authorization status for all tools or specific tools, and interpreting
- [Direct Third-Party API Call](https://docs.arcade.dev/en/home/auth/call-third-party-apis-directly.md): This documentation page provides a comprehensive guide on how to retrieve an authorization token for directly calling third-party APIs, specifically using Arcade with the Gmail API as an example. Users will learn to manage user authentication flows, handle authorization requests, and utilize tokens to access
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/en/home/auth/how-arcade-helps.md): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details the challenges of authentication and authorization in agentic applications and outlines how Arcade's system supports secure access through OAuth 2.0, enabling
- [How Arcade helps with Agent Authorization](https://docs.arcade.dev/en/home/auth/how-arcade-helps.md): This documentation page explains how Arcade facilitates agent authorization for applications that require access to sensitive user data and services. It details how Arcade's authorization system supports OAuth 2.0, API keys, and user tokens, enabling AI agents to securely perform tasks on
- [Secure and Brand the Auth Flow in Production](https://docs.arcade.dev/en/home/auth/secure-auth-production.md): This documentation page guides users on how to secure and customize their authentication flows using Arcade.dev in production environments. It outlines the use of the Arcade user verifier for development and the implementation of a custom user verifier for production applications, ensuring user safety and a tailored

## Auth Providers

- [Asana](https://docs.arcade.dev/en/home/auth-providers/asana.md): This documentation page provides guidance on using the Asana authentication provider within the Arcade platform, enabling users to call Asana APIs on behalf of their applications. It details how to configure both the default Asana auth provider and custom app credentials, including steps for
- [Atlassian](https://docs.arcade.dev/en/home/auth-providers/atlassian.md): This documentation page provides guidance on configuring a custom Atlassian Auth Provider for use with Arcade, enabling users to authenticate and interact with the Atlassian API. It outlines the steps for creating an Atlassian app, setting up OAuth credentials, and
- [Auth Providers](https://docs.arcade.dev/en/home/auth-providers.md): This documentation page provides a comprehensive registry of authentication providers available within the Arcade ecosystem, enabling users to securely connect their data to Arcade tools. It outlines the benefits of using Arcade's built-in auth providers versus configuring custom ones, including branding and rate limit isolation
- [ClickUp](https://docs.arcade.dev/en/home/auth-providers/clickup.md): This documentation page provides guidance on configuring and using the ClickUp authentication provider within the Arcade platform, enabling users to call the ClickUp API on behalf of their users. It includes instructions for creating a ClickUp app, setting up OAuth credentials, and integrating
- [Discord](https://docs.arcade.dev/en/home/auth-providers/discord.md): This documentation page provides guidance on configuring a custom Discord authentication provider within the Arcade platform, enabling users to call the Discord API on behalf of users. It outlines the steps to create a Discord app, set up OAuth 2.0 credentials, and integrate
- [Dropbox](https://docs.arcade.dev/en/home/auth-providers/dropbox.md): This documentation page provides guidance on configuring a custom Dropbox authentication provider within the Arcade platform, enabling users to call the Dropbox API on behalf of their applications. It outlines the steps for creating a Dropbox app, setting up OAuth 2.0 credentials, and
- [GitHub](https://docs.arcade.dev/en/home/auth-providers/github.md): This documentation page provides guidance on configuring GitHub authentication for tools and applications using the Arcade platform, enabling users to call GitHub APIs on behalf of users. It outlines the steps to create and set up a GitHub app, as well as how to
- [Google](https://docs.arcade.dev/en/home/auth-providers/google.md): This documentation page provides guidance on configuring and using the Google authentication provider within the Arcade platform, enabling users to access Google/Google Workspace APIs on behalf of their users. It outlines the steps to create a Google app, configure OAuth credentials, and integrate Google
- [Hubspot](https://docs.arcade.dev/en/home/auth-providers/hubspot.md): This documentation page provides guidance on using and configuring the Hubspot authentication provider within the Arcade platform, enabling users to call Hubspot APIs seamlessly. It outlines the steps for utilizing Arcade's default Hubspot auth provider or setting up custom app credentials for production use
- [Linear](https://docs.arcade.dev/en/home/auth-providers/linear.md): This documentation page provides guidance on configuring and using the Linear authentication provider with Arcade, enabling applications and custom tools to access Linear APIs on behalf of users. It outlines the steps for creating a Linear app, setting up OAuth2 credentials, and integrating Linear auth
- [LinkedIn](https://docs.arcade.dev/en/home/auth-providers/linkedin.md): This documentation page provides guidance on configuring and using the LinkedIn authentication provider with Arcade, enabling users to call LinkedIn APIs through their applications and custom tools. It outlines the steps to create a LinkedIn app, configure app credentials, and utilize the Linked
- [Microsoft](https://docs.arcade.dev/en/home/auth-providers/microsoft.md): This documentation page provides guidance on how to create and configure a custom Microsoft Auth Provider for use with Arcade, enabling applications and tools to access the Microsoft Graph API on behalf of users. It outlines the steps to register a Microsoft app, set permissions, and
- [Notion](https://docs.arcade.dev/en/home/auth-providers/notion.md): This documentation page provides guidance on configuring the Notion authentication provider for use with Arcade, enabling applications and custom tools to access Notion APIs on behalf of users. It outlines the steps to create a Notion app, set up OAuth credentials, and implement
- [OAuth 2.0](https://docs.arcade.dev/en/home/auth-providers/oauth2.md): This documentation page provides guidance on configuring OAuth 2.0 authentication for tools and agents using Arcade, enabling them to authorize with any OAuth 2.0-compatible API on behalf of users. It details the setup process for both the Arcade Cloud Engine and
- [Reddit](https://docs.arcade.dev/en/home/auth-providers/reddit.md): This documentation page provides instructions for configuring a custom Reddit Auth Provider within the Arcade platform, enabling users to authenticate and interact with the Reddit API on behalf of their users. It outlines the steps to create a Reddit application, set up OAuth credentials, and integrate
- [Salesforce](https://docs.arcade.dev/en/home/auth-providers/salesforce.md): This documentation page provides guidance on configuring the Salesforce authentication provider for use with Arcade, enabling users to call Salesforce APIs through various tools and applications. It outlines the steps for creating a Connected App in Salesforce, setting necessary OAuth settings, and managing app permissions to
- [Slack](https://docs.arcade.dev/en/home/auth-providers/slack.md): This documentation page provides guidance on configuring the Slack authentication provider for use with Arcade, enabling tools and agents to interact with Slack APIs on behalf of users. It outlines the steps to create a Slack app, set up app credentials, and integrate Slack with the
- [Spotify](https://docs.arcade.dev/en/home/auth-providers/spotify.md): This documentation page provides guidance on configuring a custom Spotify Auth Provider within the Arcade platform, enabling users to authenticate and interact with the Spotify API on behalf of their application users. It outlines the necessary steps to create a Spotify app, set up OAuth credentials,
- [Twitch](https://docs.arcade.dev/en/home/auth-providers/twitch.md): This documentation page provides instructions for configuring a custom Twitch authentication provider in Arcade, enabling users to call the Twitch API on behalf of their applications. It outlines the steps to create a Twitch app, set up OAuth credentials, and integrate the Twitch auth provider within
- [X](https://docs.arcade.dev/en/home/auth-providers/x.md): This documentation page provides guidance on using and configuring the X (Twitter) authentication provider within the Arcade platform, enabling users to call the X API on behalf of users. It includes instructions for creating an X app, setting up OAuth providers in the Arcade Dashboard
- [Zendesk](https://docs.arcade.dev/en/home/auth-providers/zendesk.md): This documentation page provides guidance on configuring a custom Zendesk authentication provider for use with Arcade, enabling users to call Zendesk APIs on behalf of individuals. It outlines the steps necessary to create a Zendesk app, set up OAuth credentials, and integrate with
- [Zoom](https://docs.arcade.dev/en/home/auth-providers/zoom.md): This documentation page provides guidance on configuring a custom Zoom Auth Provider within the Arcade platform, enabling users to authenticate and interact with the Zoom API on behalf of their users. It outlines the steps for creating a Zoom app, setting up OAuth credentials, and integrating

## Build Tools

- [Add user authorization to your MCP tools](https://docs.arcade.dev/en/home/build-tools/create-a-tool-with-auth.md): This documentation page guides users on how to implement user authorization in their custom MCP tools using Arcade, OAuth, and various auth providers, such as Reddit. It covers the necessary prerequisites, explains the workflow of auth providers, and provides step-by-step instructions for
- [Create an MCP tool with secrets](https://docs.arcade.dev/en/home/build-tools/create-a-tool-with-secrets.md): This documentation page guides users on how to create custom MCP tools that securely handle sensitive information, known as secrets, using the Arcade platform. It covers the process of reading secrets from various sources, such as environment variables and the Arcade Dashboard, and emphasizes best
- [Creating an MCP Server with Arcade](https://docs.arcade.dev/en/home/build-tools/create-a-mcp-server.md): This documentation page provides a comprehensive guide on how to create, test, deploy, and publish a custom MCP Server using the `arcade_mcp_server` package with Arcade tools. Users will learn to scaffold a server project, run the server locally,
- [Logging tool activity](https://docs.arcade.dev/en/home/build-tools/logging-mcp-tool-activity.md): This documentation page provides guidance on how to log tool activity in an MCP server, detailing various logging levels and patterns for effective debugging and monitoring. Users will learn best practices for structured logging, error handling, and tracking long-running operations, along with example code
- [Organize your MCP server and tools](https://docs.arcade.dev/en/home/build-tools/organize-mcp-server-tools.md): This documentation page provides best practices for organizing your MCP server and tools, including how to define and import tools from separate files and other packages. Users will learn to maintain a clean project structure by keeping tools organized and utilizing decorators effectively. The page also includes
- [Providing useful tool errors](https://docs.arcade.dev/en/home/build-tools/providing-useful-tool-errors.md): This documentation page guides users on how to effectively handle errors when building tools with Arcade MCP, emphasizing the importance of robust error management. It explains the automatic error adaptation process, outlines when to explicitly raise different types of errors, and provides insights into common error
- [RetryableToolError in Arcade](https://docs.arcade.dev/en/home/build-tools/retry-tools-with-improved-prompt.md): This documentation page explains how to use the `RetryableToolError` in the Arcade Tool SDK to enhance tool call outcomes by providing additional context for input parameters. It guides users on when to raise this error to improve the model's predictions and includes an
- [Understanding `Context` and tools](https://docs.arcade.dev/en/home/build-tools/tool-context.md): This documentation page explains the `Context` class in Arcade, which manages authorization and user information for authenticated tools. It outlines how to utilize various runtime features such as logging, secrets management, user context, and progress reporting through the `Context` object.

## Changelog

- [Changelog](https://docs.arcade.dev/en/home/changelog.md): The Changelog documentation page provides users with a comprehensive overview of the latest updates and features introduced at Arcade.dev, including new toolkits, enhancements to MCP servers, and bug fixes. Users can track changes over time, ensuring they stay informed about improvements and

## Contact Us

- [Contact Us](https://docs.arcade.dev/en/home/contact-us.md): The "Contact Us" documentation page provides users with various support channels to connect with the Arcade team, including real-time assistance via Discord, reporting technical issues on GitHub, and accessing resources for self-help. It also outlines the process for contacting support via

## Crewai

- [page](https://docs.arcade.dev/en/home/crewai/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into CrewAI applications, detailing the necessary prerequisites, setup, and configuration steps. Users will learn how to authorize tools, manage API keys, and effectively utilize these tools within their CrewAI agent teams
- [Provide the tool manager callback to the ArcadeToolManager](https://docs.arcade.dev/en/home/crewai/custom-auth-flow.md): This documentation page guides users in creating a custom authentication flow for the ArcadeToolManager within their CrewAI agent teams. It outlines the necessary prerequisites, environment setup, and configuration steps to implement a tailored authorization process before executing Arcade tools. By following this guide

## Custom Mcp Server Quickstart

- [Build MCP Server QuickStart](https://docs.arcade.dev/en/home/custom-mcp-server-quickstart.md): The "Build MCP Server QuickStart" documentation provides a step-by-step guide for users to create and configure their custom MCP Server using the Arcade MCP framework. It covers essential tasks such as setting up the environment, installing necessary packages, creating the server,

## Deployment

- [Engine Configuration](https://docs.arcade.dev/en/home/deployment/engine-configuration.md): This documentation page provides advanced configuration options for enterprise customers self-hosting the Arcade Engine, detailing how to install the engine on various platforms and customize its settings through configuration files. Users will learn about the `engine.yaml` and `engine.env` files,
- [On-premise MCP Servers](https://docs.arcade.dev/en/home/deployment/on-prem-mcp.md): This documentation page provides guidance on deploying on-premises MCP servers within a hybrid architecture, enabling users to run tools in their own environment while utilizing Arcade's cloud infrastructure. It covers key aspects such as setting up the server, creating secure tunnels for public access

## Evaluate Tools

- [Evaluate tools](https://docs.arcade.dev/en/home/evaluate-tools/create-an-evaluation-suite.md): This documentation page provides a comprehensive guide on how to create and run an evaluation suite for assessing tools using the Arcade framework. Users will learn to define evaluation cases, utilize various critics to measure performance, and execute evaluations to ensure their tools are effectively integrated with
- [Run evaluations with the Arcade CLI](https://docs.arcade.dev/en/home/evaluate-tools/run-evaluations.md): This documentation page provides guidance on using the Arcade CLI to run evaluations of tool-enabled language models efficiently. It details the `arcade evals` command, including how to specify evaluation files, customize evaluation options, and interpret the results, enabling users to
- [Why evaluate tools?](https://docs.arcade.dev/en/home/evaluate-tools/why-evaluate-tools.md): This documentation page explains the importance of evaluating tools used by language models with tool-calling capabilities to ensure their effectiveness and reliability in production environments. It outlines the evaluation process, focusing on tool utilization and intent understanding, while introducing Arcade's Evaluation Framework for assessing

## Faq

- [Frequently Asked Questions](https://docs.arcade.dev/en/home/faq.md): This documentation page provides answers to frequently asked questions about the Arcade platform, helping users understand how to create and contribute tools, differentiate between various components like the Arcade CLI and API keys, and navigate authentication processes. It aims to enhance user experience by clarifying

## Glossary

- [Arcade Glossary](https://docs.arcade.dev/en/home/glossary.md): The Arcade Glossary provides definitions and explanations of key terms and concepts related to the Arcade platform, including agents, tools, and the Model Context Protocol (MCP). It helps users understand the components and functionalities necessary for building and deploying applications that utilize large

## Google Adk

- [Arcade with Google ADK](https://docs.arcade.dev/en/home/google-adk/overview.md): This documentation page provides a comprehensive guide for integrating the Arcade framework with the Google ADK library, enabling users to enhance their AI agents with various tools like Google Mail and GitHub. It covers installation, key features, basic usage examples, and authorization handling
- [Initialize the Arcade client](https://docs.arcade.dev/en/home/google-adk/use-arcade-tools.md): This documentation page provides a step-by-step guide for integrating Arcade tools into Google ADK applications, including prerequisites, environment setup, API key configuration, and agent management. Users will learn how to authorize tools, run agents with user context, and explore various

## Hosting Overview

- [Hosting Options](https://docs.arcade.dev/en/home/hosting-overview.md): This documentation page provides an overview of various hosting options for Arcade, including using the cloud service, deploying on-premise MCP servers, and customizing authentication experiences. Users can learn how to connect their tools to local resources, manage tool calls, and deploy Arcade

## Langchain

- [Fetch the "ScrapeUrl" tool from the "Firecrawl" MCP Server](https://docs.arcade.dev/en/home/langchain/use-arcade-tools.md): This documentation page provides a comprehensive guide on integrating Arcade tools into LangGraph applications, detailing the necessary prerequisites, environment setup, and configuration steps. Users will learn how to manage Arcade tools, set up language models, create agents, and stream responses effectively.
- [Import necessary classes and modules](https://docs.arcade.dev/en/home/langchain/user-auth-interrupts.md): This documentation page guides users in creating a LangGraph workflow that incorporates user authorization for specific Arcade tools, ensuring that only authorized tools are accessible to the language model. It outlines the necessary prerequisites, installation steps, configuration, and code examples in both Python and
- [page](https://docs.arcade.dev/en/home/langchain/auth-langchain-tools.md): This documentation page provides a step-by-step guide for users to authorize existing LangChain tools, such as the `GmailToolkit`, using the Arcade platform. It outlines the prerequisites, installation of necessary packages, and detailed instructions for the authorization process in both

## Mastra

- [Create a new Mastra project](https://docs.arcade.dev/en/home/mastra/use-arcade-tools.md): This documentation page provides a step-by-step guide for integrating Arcade tools into a new Mastra project, enabling users to enhance their Mastra applications with these tools. It covers prerequisites, project creation, client installation, API key configuration, and agent interaction methods
- [page](https://docs.arcade.dev/en/home/mastra/overview.md): This documentation page provides guidance on integrating Arcade's tool ecosystem with Mastra, an open-source TypeScript agent framework, to enhance the functionality of Mastra applications. Users will learn how to access various pre-built tools, simplify tool management, and build sophisticated
- [page](https://docs.arcade.dev/en/home/mastra/user-auth-interrupts.md): This documentation page guides users on managing user-specific authorization for Arcade tools within Mastra applications, focusing on dynamic tool loading and per-user authentication flows. It outlines the necessary steps to configure agents, create API endpoints, and handle tool authorization effectively, ensuring a

## Mcp Clients

- [Use Arcade in Cursor](https://docs.arcade.dev/en/home/mcp-clients/cursor.md): This documentation page provides a step-by-step guide for users to connect Cursor to an Arcade MCP Gateway, enabling them to utilize Arcade tools within the Cursor application. It outlines the prerequisites, setup process, and instructions for testing the connection. By following this guide
- [Use Arcade in Visual Studio Code](https://docs.arcade.dev/en/home/mcp-clients/visual-studio-code.md): This documentation page provides a step-by-step guide for connecting Visual Studio Code to an Arcade MCP Gateway, enabling users to integrate and utilize Arcade's features within the code editor. It outlines the prerequisites, including account creation and API key retrieval, and details the
- [Use Arcade with Claude Desktop](https://docs.arcade.dev/en/home/mcp-clients/claude-desktop.md): This documentation page provides a step-by-step guide for connecting Claude Desktop to a local Arcade server, enabling users to access Arcade tools. It outlines the prerequisites, including creating an Arcade account and obtaining an API key, as well as detailed setup instructions for configuring

## Mcp Gateways

- [MCP Gateways](https://docs.arcade.dev/en/home/mcp-gateways.md): This documentation page provides a comprehensive guide on configuring and using MCP Gateways, which enable users to connect multiple MCP Servers for streamlined management and access to various tools within a single project. It outlines the steps to create an MCP Gateway, including selecting tools and

## MCP Servers

- [page](https://docs.arcade.dev/en/mcp-servers.md): This documentation page provides a comprehensive registry of all MCP Servers within the Arcade ecosystem, helping users to easily locate and access the available toolkits.

## MCP Servers - Contribute A Server

- [How to contribute a MCP Server](https://docs.arcade.dev/en/mcp-servers/contribute-a-server.md): This documentation page provides a step-by-step guide for developers on how to contribute their MCP Server to the Arcade documentation, enhancing visibility and accessibility for other users. It outlines prerequisites such as building and publishing the MCP Server, as well as the process for submitting

## MCP Servers - Customer Support

- [FreshserviceApi](https://docs.arcade.dev/en/mcp-servers/customer-support/freshservice-api.md): The FreshserviceApi documentation provides a comprehensive guide for developers to programmatically interact with the Freshservice platform using API tools. Users can learn how to manage various aspects of their IT service management, including organizational data, assets, software licenses, service catalogs,
- [Zendesk](https://docs.arcade.dev/en/mcp-servers/customer-support/zendesk.md): This documentation page provides a comprehensive guide for using the Zendesk MCP Server, enabling users to manage customer support tickets and knowledge base articles efficiently. It outlines various tools available for listing tickets, retrieving comments, adding comments, marking tickets as solved, and searching
- [Zendesk Reference](https://docs.arcade.dev/en/mcp-servers/customer-support/zendesk/reference.md): The Zendesk Reference documentation provides a comprehensive list of enumerations used in the Zendesk MCP Server, including ticket statuses, sorting orders, and article sorting criteria. Users can utilize this reference to understand and implement the appropriate enumerations in their Zendesk applications

## MCP Servers - Databases

- [Clickhouse](https://docs.arcade.dev/en/mcp-servers/databases/clickhouse.md): This documentation page provides an overview of the Arcade Clickhouse MCP Server, which enables agents to interact with Clickhouse databases in a read-only capacity. Users can learn to discover database schemas, explore table structures, and execute SELECT queries safely, while adhering to
- [Clickhouse](https://docs.arcade.dev/en/mcp-servers/databases/postgres/clickhouse.md): This documentation page provides an overview of the Arcade Clickhouse MCP Server, which enables agents to interact with Clickhouse databases in a read-only capacity. Users can learn how to discover database schemas, explore table structures, and execute SELECT queries safely, while also
- [MongoDB](https://docs.arcade.dev/en/mcp-servers/databases/mongodb.md): This documentation page provides an overview of the Arcade MongoDB MCP Server, which allows agents to interact with MongoDB databases in a read-only capacity. Users can learn how to discover databases and collections, explore document structures, and execute safe queries, all while
- [MongoDB](https://docs.arcade.dev/en/mcp-servers/databases/postgres/mongodb.md): This documentation page provides an overview of the Arcade MongoDB MCP Server, which enables agents to interact with MongoDB databases in a read-only capacity. Users can learn to discover databases and collections, explore document structures, and execute safe queries, while also understanding
- [Postgres](https://docs.arcade.dev/en/mcp-servers/databases/postgres.md): This documentation page provides users with a comprehensive guide to the Arcade Postgres MCP Server, which enables agents to interact with PostgreSQL databases in a read-only capacity. Users can learn how to discover database schemas, explore table structures, and execute SELECT queries safely

## MCP Servers - Development

- [Brightdata](https://docs.arcade.dev/en/mcp-servers/development/brightdata.md): The Brightdata documentation page provides users with tools and guidance for scraping, searching, and extracting structured data from various websites at scale without getting blocked. It details specific functionalities, such as scraping web pages in Markdown format, performing advanced searches on major search engines
- [CursorAgentsApi](https://docs.arcade.dev/en/mcp-servers/development/cursor-agents-api.md): The CursorAgentsApi documentation provides users with tools to manage and inspect background agents, including functionalities to list, retrieve status, delete agents, and access authentication and model recommendations. It serves as a guide for developers to effectively interact with the CursorAgents API using
- [E2B](https://docs.arcade.dev/en/mcp-servers/development/e2b.md): The E2B documentation page provides users with tools to run code in a sandboxed environment and create static matplotlib charts, facilitating the development of agents and AI applications. It outlines the available tools, their functionalities, and authentication requirements, while also offering code
- [Firecrawl](https://docs.arcade.dev/en/mcp-servers/development/firecrawl.md): The Firecrawl documentation provides users with a comprehensive guide to utilizing the Arcade Firecrawl MCP Server, enabling them to build agents and AI applications that can scrape, crawl, and map websites effectively. It outlines various tools available for tasks such as retrieving crawl status
- [GitHub](https://docs.arcade.dev/en/mcp-servers/development/github.md): This documentation page provides users with tools and guidance for integrating and interacting with GitHub repositories, issues, and pull requests through the Arcade GitHub MCP Server. Users can learn how to perform various actions, such as creating issues, managing pull requests, and
- [Reference for Firecrawl Toolkit](https://docs.arcade.dev/en/mcp-servers/development/firecrawl/reference.md): The "Reference for Firecrawl Toolkit" documentation page provides users with a comprehensive overview of the various output formats available for scraped web pages, including Markdown, HTML, raw HTML, links, and screenshots. It helps users understand how to utilize these formats effectively
- [Reference for GitHub Toolkit](https://docs.arcade.dev/en/mcp-servers/development/github/reference.md): The GitHub Toolkit Reference documentation provides users with detailed specifications for sorting and filtering pull requests, review comments, and repository activities based on various properties and states. It outlines options for sorting by criteria such as creation date, popularity, and activity type, as

## MCP Servers - Entertainment

- [Imgflip](https://docs.arcade.dev/en/mcp-servers/entertainment/imgflip.md): The Imgflip documentation page provides users with tools to create and manage memes using the Imgflip API. It outlines functionalities such as searching for meme templates, retrieving popular memes, and creating custom memes, along with code examples for implementation in Python and JavaScript
- [Imgflip](https://docs.arcade.dev/en/mcp-servers/entertainment/spotify/imgflip.md): The Imgflip documentation page provides users with tools to create and manage memes through the Imgflip API, enabling the development of agents and AI applications. Users can search for meme templates, retrieve popular memes, and create custom memes by adding text to existing templates
- [Spotify](https://docs.arcade.dev/en/mcp-servers/entertainment/spotify.md): This documentation page provides a comprehensive overview of the Arcade Spotify MCP Server, which enables users to build agents and AI applications that interact with Spotify tracks. It outlines various tools available for retrieving track information, controlling playback, and searching the Spotify catalog, all of
- [Twitch auth provider](https://docs.arcade.dev/en/mcp-servers/entertainment/twitch.md): This documentation page provides instructions for creating and configuring a custom Twitch Auth Provider within the Arcade platform, enabling users to authenticate and call the Twitch API on behalf of users. It outlines the necessary steps to set up a Twitch application, configure the provider in the

## MCP Servers - Payments

- [Stripe](https://docs.arcade.dev/en/mcp-servers/payments/stripe.md): This documentation page provides users with the tools and guidance needed to interact with the Stripe API, enabling the creation and management of customers, products, invoices, and payment links. It outlines various functionalities available through specific tools, along with example code snippets for implementation
- [StripeApi](https://docs.arcade.dev/en/mcp-servers/payments/stripe_api.md): The StripeApi documentation provides tools for users to interact programmatically with the Stripe API, enabling comprehensive management of accounts, customers, payments, billing, and reporting. It outlines various operations such as retrieving account details, managing payment methods, and accessing financial data

## MCP Servers - Productivity

- [Asana](https://docs.arcade.dev/en/mcp-servers/productivity/asana.md): This documentation page provides a comprehensive guide for using the Arcade Asana MCP Server, enabling users to build agents and AI applications that interact with Asana tasks, projects, and workspaces. It outlines various tools available for managing teams, creating and updating tasks
- [Asana Reference](https://docs.arcade.dev/en/mcp-servers/productivity/asana/reference.md): The Asana Reference documentation provides a comprehensive list of enumerations related to tag colors, task sorting options, and sort order used in the Asana MCP Server. Users can utilize this reference to understand and implement the various attributes and sorting functionalities available within As
- [BoxApi](https://docs.arcade.dev/en/mcp-servers/productivity/box-api.md): The BoxApi documentation provides a comprehensive guide for users to manage Box content and workflows through a set of tools that facilitate file management, collaboration, document generation, and enterprise operations. It enables users to automate processes related to content lifecycle, security compliance, and
- [Clickup](https://docs.arcade.dev/en/mcp-servers/productivity/clickup.md): This documentation page provides an overview of the ClickUp MCP Server, which allows users to build agents and applications that interact with ClickUp workspaces, tasks, and members. It details the available tools for managing tasks, comments, and workspace structures, enabling
- [Clickup Reference](https://docs.arcade.dev/en/mcp-servers/productivity/clickup/reference.md): The Clickup Reference documentation provides users with a comprehensive overview of enumerations related to task management within the Clickup MCP Server. It details the values for task priorities, filter scopes, task ordering, and comment resolutions, enabling users to effectively utilize the Click
- [Close.io](https://docs.arcade.dev/en/mcp-servers/productivity/closeio.md): This documentation page introduces Close.io, a CRM tool designed to help users manage leads, contacts, and deals effectively. It is currently marked as "Coming Soon," indicating that detailed information and guidance will be available shortly.
- [Confluence](https://docs.arcade.dev/en/mcp-servers/productivity/confluence.md): This documentation page provides an overview of the Arcade Confluence MCP Server, which offers a suite of tools for developers to create agents and AI applications that interact with Confluence. Users can learn how to perform various actions such as creating, updating, and retrieving
- [Dropbox](https://docs.arcade.dev/en/mcp-servers/productivity/dropbox.md): This documentation page provides users with tools to interact with Dropbox, enabling the development of agents and AI applications that can browse, search, and download files and folders. It outlines specific functionalities available through the Arcade Dropbox MCP Server, including detailed instructions for using each
- [Gmail](https://docs.arcade.dev/en/mcp-servers/productivity/gmail.md): This documentation page provides a comprehensive overview of the Arcade Gmail MCP Server, which enables users to build agents and AI applications that can send, read, and manage emails through the Gmail API. It outlines various available tools for tasks such as composing drafts, deleting
- [Gmail Reference](https://docs.arcade.dev/en/mcp-servers/productivity/gmail/reference.md): The Gmail Reference documentation provides a comprehensive list of enumerations used in the Gmail MCP Server, specifically detailing options for reply recipients and date ranges. Users can refer to this page to understand the available constants for configuring email responses and filtering messages by time periods.
- [Google Calendar](https://docs.arcade.dev/en/mcp-servers/productivity/google-calendar.md): This documentation page provides a comprehensive guide for using the Arcade Google Calendar MCP Server, enabling users to build applications that interact with Google Calendar. It outlines available tools for managing calendars and events, including listing calendars, creating and updating events, and finding available meeting
- [Google Contacts](https://docs.arcade.dev/en/mcp-servers/productivity/google-contacts.md): This documentation page provides users with tools to interact with Google Contacts through the Arcade Google Contacts MCP Server, enabling the creation and searching of contacts by name or email. It outlines available functionalities, including detailed instructions for using each tool, and offers guidance on how
- [Google Docs](https://docs.arcade.dev/en/mcp-servers/productivity/google-docs.md): This documentation page provides a comprehensive overview of the Arcade Google Docs MCP Server, which enables users to build agents and AI applications that interact with Google Docs. It outlines available tools for creating, updating, listing, and deleting documents, as well as retrieving user
- [Google Drive](https://docs.arcade.dev/en/mcp-servers/productivity/google-drive.md): This documentation page provides users with tools to interact with Google Drive through the GoogleDrive MCP Server, enabling efficient file management and access. Users can retrieve their file structure, generate a Google File Picker URL for secure file selection, and search for specific files within
- [Google Sheets](https://docs.arcade.dev/en/mcp-servers/productivity/google-sheets.md): This documentation page provides a comprehensive overview of the Arcade Google Sheets MCP Server, enabling users to build agents and AI applications that interact with Google Sheets. It outlines various tools for creating spreadsheets, reading and writing data, and retrieving metadata, along with example code
- [Google Slides](https://docs.arcade.dev/en/mcp-servers/productivity/google-slides.md): This documentation page provides a comprehensive guide for using the Google Slides MCP Server, enabling users to interact with Google Slides presentations through various tools. Users can create presentations, add slides, comment on specific slides, retrieve comments, search for presentations, and convert content
- [GoogleCalendar Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-calendar/reference.md): The GoogleCalendar Reference documentation provides a comprehensive list of enumerations related to event visibility, update options for sending notifications, and managing Google Meet settings within the GoogleCalendar MCP Server. Users can refer to this page to understand the specific values and options available for
- [GoogleDocs Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-docs/reference.md): The GoogleDocs Reference documentation provides a comprehensive list of enumerations used in the GoogleDocs MCP Server, specifically focusing on sorting options and document formats. Users can learn how to effectively order documents by various criteria and understand the supported formats for document representation. This
- [GoogleDrive Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-drive/reference.md): The GoogleDrive Reference documentation provides a comprehensive list of enumerations for ordering and file types used in the GoogleDrive MCP Server. Users can learn about various sorting options, such as creation and modification times, as well as the different file types supported by Google
- [GoogleSheets Reference](https://docs.arcade.dev/en/mcp-servers/productivity/google-sheets/reference.md): The GoogleSheets Reference documentation provides a comprehensive list of enumerations used in the GoogleSheets MCP Server, specifically focusing on various order criteria for organizing data. Users can learn how to utilize these enumerations to sort their Google Sheets data effectively based on attributes like
- [Jira](https://docs.arcade.dev/en/mcp-servers/productivity/jira.md): This documentation page provides a comprehensive overview of the Jira MCP Server, enabling users to efficiently manage Jira issues and projects through various tools. Users can learn how to create, update, and search for issues, manage labels and attachments, and transition issues between statuses
- [Jira Environment Variables](https://docs.arcade.dev/en/mcp-servers/productivity/jira/environment-variables.md): This documentation page provides guidance on configuring key environment variables for optimizing interactions with the Jira API in Arcade tools. Users will learn how to set parameters for maximum concurrent requests, API request timeouts, and caching limits to enhance performance and efficiency during tool execution.
- [Jira Reference](https://docs.arcade.dev/en/mcp-servers/productivity/jira/reference.md): The Jira Reference documentation provides users with a comprehensive list of enumerations related to sprint states, priority schemes, and issue comment ordering used in the Jira MCP Server. It helps users understand how to filter sprints and sort issues effectively through the Jira API.
- [Linear](https://docs.arcade.dev/en/mcp-servers/productivity/linear.md): This documentation page provides users with tools to interact with Linear's issue tracking and team management features, specifically through the Arcade Linear MCP Server. Users can retrieve detailed information about specific issues and team data without making modifications, utilizing tools like "Linear.GetIssue"
- [Notion](https://docs.arcade.dev/en/mcp-servers/productivity/notion.md): This documentation page provides an overview of the Arcade Notion MCP Server, which offers a suite of tools for developers to interact with Notion. Users can learn how to retrieve page content, create new pages, search for items, and access workspace metadata using
- [Obsidian](https://docs.arcade.dev/en/mcp-servers/productivity/obsidian.md): This documentation page provides an overview of the Arcade Obsidian Toolkit, a community-contributed MCP Sever verified by the Arcade team. It guides users to the GitHub repository for further information and resources related to the toolkit.
- [Outlook Calendar](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-calendar.md): This documentation page provides users with tools and guidance for managing events in Outlook Calendar through the Arcade Outlook Calendar MCP Server. Users can learn to create, list, and retrieve calendar events using the Outlook API, with detailed instructions and code examples for implementation. Additionally
- [Outlook Mail](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-mail.md): The Outlook Mail documentation page provides users with tools to read, write, and send emails using the Outlook API, enabling seamless email management within their applications. It includes detailed descriptions of available tools, such as creating and updating draft emails, sending emails, and
- [OutlookMail Reference](https://docs.arcade.dev/en/mcp-servers/productivity/outlook-mail/reference.md): The OutlookMail Reference documentation provides a comprehensive list of enumerations, folder names, email filter properties, and filter operators used in the OutlookMail MCP Server. It helps users understand and utilize these elements effectively when working with OutlookMail tools. This reference serves
- [page](https://docs.arcade.dev/en/mcp-servers/productivity/dropbox/reference.md): This documentation page provides a list of item categories used in Dropbox, including types such as image, document, PDF, spreadsheet, presentation, audio, video, folder, and paper. Users can refer to this classification to understand the different types of files and
- [Sharepoint](https://docs.arcade.dev/en/mcp-servers/productivity/sharepoint.md): This documentation page provides a comprehensive guide for users to interact with SharePoint through the SharePoint MCP Server, enabling them to efficiently retrieve and manage site content, lists, items, and metadata. It outlines various tools available for actions such as searching for sites
- [XeroApi](https://docs.arcade.dev/en/mcp-servers/productivity/xero-api.md): The XeroApi documentation provides tools for developers to interact with Xero's accounting data via the Xero API, enabling management of various accounting entities such as invoices, payments, and reports. Users can access, create, and manage resources, retrieve financial

## MCP Servers - Sales

- [Hubspot](https://docs.arcade.dev/en/mcp-servers/sales/hubspot.md): This documentation page provides users with tools and guidance for integrating and automating interactions with HubSpot CRM using the Hubspot MCP Server. It outlines various functionalities, such as creating and managing contacts, deals, activities, and retrieving user and company data, all
- [Hubspot Reference](https://docs.arcade.dev/en/mcp-servers/sales/hubspot/reference.md): The Hubspot Reference documentation provides a comprehensive list of enumerations related to various tools within the Hubspot MCP Server, including call directions, email statuses, meeting outcomes, communication channels, activity types, sort orders, deal types, and deal priorities. Users
- [Salesforce CRM](https://docs.arcade.dev/en/mcp-servers/sales/salesforce.md): This documentation page provides guidance on using the Arcade Salesforce CRM MCP Server, which enables users to interact with Salesforce data, including accounts, leads, and contacts, through a set of pre-built tools. Users will learn how to create a custom Salesforce Auth Provider

## MCP Servers - Search

- [Google Finance](https://docs.arcade.dev/en/mcp-servers/search/google_finance.md): This documentation page provides users with the tools and instructions to access real-time and historical stock data through the Arcade Google Finance MCP Server. Users can retrieve current stock prices and historical data by utilizing specific API calls, enabling the development of intelligent agents and applications.
- [Google Flights](https://docs.arcade.dev/en/mcp-servers/search/google_flights.md): This documentation page provides users with the necessary tools and guidance to search for one-way flights using the Arcade Google Flights API. It details the parameters required for flight searches, such as departure and arrival airport codes, travel dates, and options for sorting and filtering
- [Google Hotels](https://docs.arcade.dev/en/mcp-servers/search/google_hotels.md): The Google Hotels documentation page provides users with the tools and guidance needed to integrate hotel search capabilities into their applications using the Arcade platform. It details the parameters and functionalities of the GoogleHotels.SearchHotels API, allowing agents to retrieve hotel search results based on various
- [Google Jobs](https://docs.arcade.dev/en/mcp-servers/search/google_jobs.md): This documentation page provides users with tools to integrate and search for job openings using Google Jobs through the Arcade Google Jobs MCP Server. It outlines the available API functionalities, including parameters for customizing job searches, and offers guidance on authentication and configuration. Users can learn
- [Google Maps](https://docs.arcade.dev/en/mcp-servers/search/google_maps.md): This documentation page provides tools for integrating Google Maps functionality into agents and AI applications, specifically for obtaining directions between two locations using either addresses or latitude/longitude coordinates. Users can access detailed instructions and examples for utilizing the available tools, such as `GoogleMaps
- [Google News](https://docs.arcade.dev/en/mcp-servers/search/google_news.md): This documentation page provides users with tools to easily search for news stories using Google News through the Arcade Google News MCP Server. It outlines the available functionalities, including parameters for customizing searches by keywords, country, and language, as well as instructions for authentication and
- [Google Search](https://docs.arcade.dev/en/mcp-servers/search/google_search.md): This documentation page provides guidance on using the Arcade Search MCP Server to perform Google searches via SerpAPI, enabling users to build agents and AI applications that return organic search results. It details the available tools, specifically the GoogleSearch.Search function, including its
- [Google Shopping Search](https://docs.arcade.dev/en/mcp-servers/search/google_shopping.md): This documentation page provides users with the tools and instructions needed to enable agents to search for products on Google Shopping using the Arcade Google Shopping Search MCP Server. It details the available functionalities, including the required parameters for product searches, authentication methods, and default settings
- [Walmart Search](https://docs.arcade.dev/en/mcp-servers/search/walmart.md): The Walmart Search documentation provides tools for developers to integrate product search and details retrieval from Walmart into their applications. Users can learn how to utilize the `Walmart.SearchProducts` and `Walmart.GetProductDetails` tools, including necessary parameters and example code
- [YouTube Search](https://docs.arcade.dev/en/mcp-servers/search/youtube.md): The YouTube Search documentation page provides users with tools to easily search for videos on YouTube and retrieve video details through a pre-built MCP Server. It outlines available functionalities, including parameters for searching and obtaining video information, as well as authentication requirements. Users

## MCP Servers - Social Communication

- [Arcade for Slack](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/install.md): The "Arcade for Slack" documentation page guides users on how to integrate Arcade's AI tools with their Slack workspace, enhancing team efficiency through features like message sending, information retrieval, and content generation. It provides step-by-step instructions for installation, inviting
- [Arcade for Zoom](https://docs.arcade.dev/en/mcp-servers/social-communication/zoom/install.md): The "Arcade for Zoom" documentation page guides users on integrating Arcade's AI tools with their Zoom accounts to enhance meeting management and information retrieval. It outlines the functionalities available, such as listing upcoming meetings and accessing invitation details, while also providing instructions for
- [Discord](https://docs.arcade.dev/en/mcp-servers/social-communication/discord.md): This documentation page provides guidance on configuring and using the Discord authentication provider with Arcade, enabling users to call the Discord API on behalf of a user. It outlines the steps for creating a Discord app, setting up OAuth in the Arcade Dashboard, and utilizing Discord
- [Environment Variables](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/environment-variables.md): This documentation page provides guidance on configuring environment variables related to Slack API interactions, specifically `SLACK_MAX_CONCURRENT_REQUESTS`, `MAX_PAGINATION_SIZE_LIMIT`, and `MAX_PAGINATION_TIMEOUT_SECONDS`. Users will learn how to adjust these settings
- [LinkedIn](https://docs.arcade.dev/en/mcp-servers/social-communication/linkedin.md): This documentation page provides users with information on the Arcade LinkedIn MCP Server, which enables the creation of agents and AI applications that can interact with LinkedIn, specifically for posting content. It details the available tools, such as creating a text post, and
- [Microsoft Teams](https://docs.arcade.dev/en/mcp-servers/social-communication/microsoft-teams.md): This documentation page provides users with a comprehensive guide to the Microsoft Teams MCP Server, enabling agents to interact effectively with Microsoft Teams. It outlines various tools and functionalities for managing teams, channels, and chats, including retrieving information, sending messages, and searching for
- [MicrosoftTeams Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/microsoft-teams/reference.md): The MicrosoftTeams Reference documentation provides a comprehensive overview of enumerations related to the MicrosoftTeams MCP Server, including various match types and team membership classifications. Users can learn about specific values and their corresponding descriptions, which can aid in implementing and utilizing Microsoft Teams functionalities
- [Reddit](https://docs.arcade.dev/en/mcp-servers/social-communication/reddit.md): This documentation page provides users with tools and guidance for building agents and AI applications that interact with Reddit, enabling functionalities such as submitting posts, commenting, and retrieving content from subreddits. It outlines the available tools, their purposes, and includes examples for
- [Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/slack/reference.md): This documentation page provides a reference for the enumerations related to conversation types used in the Slack MCP Server, including definitions for public channels, private channels, multi-person direct messages, and direct messages. Users can utilize this information to understand and implement the appropriate
- [Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/twilio/reference.md): This documentation page provides a reference for the `arcade_twilio` package, which enables users to integrate Twilio services for sending SMS and WhatsApp messages. It includes installation instructions, a brief description of the package, and detailed usage information for the
- [Slack](https://docs.arcade.dev/en/mcp-servers/social-communication/slack.md): This documentation page provides an overview of the Slack MCP Server, which enables agents and AI applications to interact with the Slack platform for managing conversations and user information. Users can learn how to retrieve user details, send messages, and access conversation metadata, thereby enhancing
- [SlackApi](https://docs.arcade.dev/en/mcp-servers/social-communication/slack_api.md): The SlackApi documentation provides a comprehensive guide for administrators and developers to manage and automate various aspects of Slack workspaces, including user management, messaging, channel operations, and file sharing. It details the capabilities of the MCP Server, which supports OAuth2 authentication
- [SlackApi](https://docs.arcade.dev/en/mcp-servers/social-communication/slack-api.md): The SlackApi documentation provides a comprehensive guide for administrators and applications to manage and interact with Slack workspaces through various functionalities, including user management, messaging, channel operations, and file sharing. It outlines key capabilities such as creating teams, managing user profiles,
- [Teams Reference](https://docs.arcade.dev/en/mcp-servers/social-communication/teams/reference.md): The Teams Reference documentation provides a comprehensive overview of enumerations related to matching types and team membership within the Teams MCP Server. Users can learn about different match criteria, such as exact and partial matches, as well as the types of team memberships available. This
- [Twilio](https://docs.arcade.dev/en/mcp-servers/social-communication/twilio.md): This documentation page provides a guide for using Twilio's MCP Server to send SMS and WhatsApp messages easily. It outlines the necessary prerequisites, configuration steps, and offers usage examples to help users effectively implement messaging functionalities within their projects. Users will learn how
- [X (formerly Twitter)](https://docs.arcade.dev/en/mcp-servers/social-communication/x.md): This documentation page provides a comprehensive guide for developers to utilize the Arcade X MCP Server, enabling them to create agents and AI applications that interact with X (formerly Twitter). It outlines various tools available for actions such as posting, replying to, deleting, and
- [Zoom](https://docs.arcade.dev/en/mcp-servers/social-communication/zoom.md): This documentation page provides an overview of the Arcade Zoom MCP Server, which enables users to build agents and AI applications that interact with Zoom by retrieving meeting information and invitations. It details the available tools, including listing upcoming meetings and retrieving meeting invitations, along with

## Oai Agents

- [Arcade with OpenAI Agents](https://docs.arcade.dev/en/home/oai-agents/overview.md): This documentation page provides a comprehensive guide for integrating Arcade with the OpenAI Agents library, enabling users to enhance AI agents with various tools such as Gmail, LinkedIn, and GitHub. It covers installation, key features, basic usage examples, and handling
- [Or set it directly when initializing the client](https://docs.arcade.dev/en/home/oai-agents/use-arcade-tools.md): This documentation page provides a comprehensive guide for integrating Arcade tools into OpenAI Agents applications, detailing the necessary prerequisites, setup, and configuration steps. Users will learn how to create and manage Arcade tools, set up agents, handle authentication, and run their applications
- [Set your API key](https://docs.arcade.dev/en/home/oai-agents/user-auth-interrupts.md): This documentation page guides users on managing user authorization for Arcade tools within OpenAI Agents applications. It covers obtaining an API key, configuring the environment, handling authorization errors, and implementing authorization flows, ensuring users can effectively integrate and manage tool access. Additionally,

## Quickstart

- [Arcade's Hosted Tools Quickstart](https://docs.arcade.dev/en/home/quickstart.md): The Arcade's Hosted Tools Quickstart documentation provides users with a step-by-step guide to set up and utilize Arcade's tools for AI agents, enabling them to perform actions like sending emails and messaging on platforms such as Slack. Users will learn how to install

## Registry Early Access

- [The Arcade Registry](https://docs.arcade.dev/en/home/registry-early-access.md): The Arcade Registry documentation provides an overview of a platform where developers can share and monetize their agentic tools, similar to HuggingFace or Pypi, while gaining valuable usage metrics and feedback. It invites users to participate in the early access beta program

## Serve Tools

- [Deploying to the cloud with Arcade Deploy](https://docs.arcade.dev/en/home/serve-tools/arcade-deploy.md): This documentation page provides a step-by-step guide for deploying a worker using Arcade Deploy, including prerequisites like Python and an Arcade account, as well as instructions for creating a deployment configuration and executing the deployment command. Users will learn how to set up their environment

## Use Tools

- [Get Formatted Tool Definitions](https://docs.arcade.dev/en/home/use-tools/get-tool-definitions.md): This documentation page provides guidance on obtaining formatted tool definitions using the Arcade Client, enabling users to retrieve both single and multiple tool definitions in specific model provider formats. It also covers converting these definitions into Zod schemas for enhanced type safety and validation, as well
- [Tool error handling](https://docs.arcade.dev/en/home/use-tools/error-handling.md): This documentation page provides guidance on effectively handling errors when using tools with Arcade's Tool Development Kit (TDK). It outlines the error handling philosophy, presents examples for client error handling in Python and JavaScript, and offers best practices for creating robust applications.
- [Types of Tools](https://docs.arcade.dev/en/home/use-tools/types-of-tools.md): This documentation page explains the two types of tools offered by Arcade: Optimized tools and Starter tools. It highlights the differences in design and functionality, emphasizing that Optimized tools are specifically tailored for AI-powered chat interfaces to enhance performance, while Starter tools provide
- [What are tools?](https://docs.arcade.dev/en/home/use-tools/tools-overview.md): This documentation page provides an overview of tool calling in language models, explaining how users can leverage external tools to enhance the capabilities of AI models for tasks like data retrieval and scheduling. It outlines practical applications, such as analyzing documents and sending emails, while also

## Vercelai

- [page](https://docs.arcade.dev/en/home/vercelai/using-arcade-tools.md): This documentation page guides users on how to integrate Arcade tools into their Vercel AI applications using the Vercel AI SDK. It provides step-by-step instructions for setting up dependencies, obtaining API keys, and utilizing Arcade's Gmail MCP Server to create